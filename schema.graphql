# stores for USD calculations
type Bundle @entity {
  id: ID!
  # price of ETH in usd
  ethPriceUSD: BigDecimal!
}

type Token @entity {
  # immutable values
  # token address
  id: ID!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: BigInt!
  # token total supply
  totalSupply: BigInt!

  # mutable values
  # volume in token units
  volume: BigDecimal!
  # volume in derived USD
  volumeUSD: BigDecimal!
  # volume in USD even on books with less reliable USD values
  untrackedVolumeUSD: BigDecimal!
  # protocolFees in USD
  protocolFeesUSD: BigDecimal!
  # liquidity across all books in token units
  totalValueLocked: BigDecimal!
  # liquidity across all books in derived USD
  totalValueLockedUSD: BigDecimal!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: BigDecimal!
  # Note: for chains where ETH is not the native token, this will be the derived
  # price of that chain's native token, effectively, this should be renamed
  # derivedNative
  derivedETH: BigDecimal!
  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
}

type Market @entity {
  # immutable values
  # `${baseToken}/${quoteToken}`
  id: ID!
  # bid book
  bidBook: Book
  # ask book
  askBook: Book
  # base
  base: Token!
  # quote
  quote: Token!

  # mutable values
  # quote per base
  price: BigDecimal!
  # base per quote
  inversePrice: BigDecimal!
  # all time quote swapped
  volumeQuote: BigDecimal!
  # all time base swapped
  volumeBase: BigDecimal!
  # all time USD swapped
  volumeUSD: BigDecimal!
  # all time USD swapped, unfiltered for unreliable USD books
  untrackedVolumeUSD: BigDecimal!
  # all time number of transactions
  txCount: BigInt!
  # all time protocolFees quote
  protocolFeesQuote: BigDecimal!
  # all time protocolFees base
  protocolFeesBase: BigDecimal!
  # all time protocolFees derived USD
  protocolFeesUSD: BigDecimal!
  # total quote across all ticks
  totalValueLockedQuote: BigDecimal!
  # total base across all ticks
  totalValueLockedBase: BigDecimal!
  # tvl USD
  totalValueLockedUSD: BigDecimal!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: BigDecimal!
  # derived fields
  marketDayData: [MarketDayData!]! @derivedFrom(field: "market")
}

type Book @entity {
  # immutable values
  # book address
  id: ID!
  # creation
  createdAtTimestamp: BigInt!
  # block book was created at
  createdAtBlockNumber: BigInt!
  # quote
  quote: Token!
  # base
  base: Token!
  # unit size
  unitSize: BigInt!
  # maker policy
  makerPolicy: BigInt!
  # maker fee
  makerFee: BigDecimal!
  # taker policy
  takerPolicy: BigInt!
  # taker fee
  takerFee: BigDecimal!
  # hooks
  hooks: String!

  # mutable values
  # current price tracker
  priceRaw: BigInt!
  # quote per base
  price: BigDecimal!
  # base per quote
  inversePrice: BigDecimal!
  # current tick
  tick: BigInt!
  # current order index
  orderIndex: BigInt!
  # all time quote swapped
  volumeQuote: BigDecimal!
  # all time base swapped
  volumeBase: BigDecimal!
  # all time USD swapped
  volumeUSD: BigDecimal!
  # all time USD swapped, unfiltered for unreliable USD books
  untrackedVolumeUSD: BigDecimal!
  # all time number of transactions
  txCount: BigInt!
  # all time protocolFees quote
  protocolFeesQuote: BigDecimal!
  # all time protocolFees base
  protocolFeesBase: BigDecimal!
  # all time protocolFees derived USD
  protocolFeesUSD: BigDecimal!
  # total quote across all ticks
  totalValueLockedQuote: BigDecimal!
  # total base across all ticks
  totalValueLockedBase: BigDecimal!
  # tvl USD
  totalValueLockedUSD: BigDecimal!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: BigDecimal!
  # derived fields
  ticks: [Tick!]! @derivedFrom(field: "book")
}

type Tick @entity {
  # immutable values
  # `${bookId}-${tick}`
  id: ID!
  # book
  book: Book!
  # tick
  tick: BigInt!
  # latest tick index
  latestTakenOrderIndex: BigInt!

  # mutable values
  # amount
  unitAmount: BigInt!
  baseAmount: BigInt!
  quoteAmount: BigInt!
  # current price tracker
  priceRaw: BigInt!
  # quote per base
  price: BigDecimal!
  # base per quote
  inversePrice: BigDecimal!
  # created time
  createdAtTimestamp: BigInt!
  # created block
  createdAtBlockNumber: BigInt!
}

type OpenOrder @entity {
  # immutable values
  # orderId
  id: ID!
  # which txn the make was included in
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # book position is within
  book: Book!
  # allow indexing by tokens
  quote: Token!
  # allow indexing by tokens
  base: Token!
  # txn origin
  origin: Bytes! # the EOA that initiated the txn

  # mutable values
  # owner of position where liquidity made to
  owner: Bytes!
  # current price tracker
  priceRaw: BigInt!
  # current tick
  tick: BigInt!
  # current order index
  orderIndex: BigInt!

  # initial
  amountUSD: BigDecimal!
  unitAmount: BigInt!
  baseAmount: BigInt!
  quoteAmount: BigInt!

  # filled
  filledAmountUSD: BigDecimal!
  filledUnitAmount: BigInt!
  filledBaseAmount: BigInt!
  filledQuoteAmount: BigInt!

  # claimed
  claimedAmountUSD: BigDecimal!
  claimedUnitAmount: BigInt!
  claimedBaseAmount: BigInt!
  claimedQuoteAmount: BigInt!

  # claimable
  claimableAmountUSD: BigDecimal!
  claimableUnitAmount: BigInt!
  claimableBaseAmount: BigInt!
  claimableQuoteAmount: BigInt!

  # open
  openAmountUSD: BigDecimal!
  openUnitAmount: BigInt!
  openBaseAmount: BigInt!
  openQuoteAmount: BigInt!
}

type Transaction @entity {
  # txn hash
  id: ID!
  # block txn was included in
  blockNumber: BigInt!
  # timestamp txn was confirmed
  timestamp: BigInt!
  # gas used during txn execution
  gasUsed: BigInt!
  gasPrice: BigInt!
}

type ChartLog @entity {
  # `${baseToken}/${quoteToken}-${intervalType}-${timestamp}`
  id: ID!
  # `${baseToken}/${quoteToken}`
  marketCode: String!
  # interval type: 1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 1d, 1w
  intervalType: String!
  # normalized candle timestamp of the block where event occurred (second)
  timestamp: BigInt!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
  # total traded volume in base token (sum of bid + ask filled)
  baseVolume: BigDecimal!
  bidBookBaseVolume: BigDecimal!
  askBookBaseVolume: BigDecimal!
}

type Pool @entity {
  # immutable values
  # pool key
  id: ID!
  # salt
  salt: String!
  # strategy contract address
  strategy: String!
  # creation
  createdAtTimestamp: BigInt!
  # block pool was created at
  createdAtBlockNumber: BigInt!
  # block pool was created at
  createdAtTransaction: Transaction!
  # amount of tokenA deposited at pool creation
  initialTokenAAmount: BigInt!
  # amount of tokenB deposited at pool creation
  initialTokenBAmount: BigInt!
  # total supply of liquidity tokens minted at pool creation
  initialTotalSupply: BigInt!
  # initial price of liquidity tokens in USD
  initialLPPriceUSD: BigDecimal!
  # tokenA
  tokenA: Token!
  # tokenB
  tokenB: Token!
  # bookA
  bookA: Book!
  # bookB
  bookB: Book!

  # mutable values
  # oracle price
  oraclePrice: BigDecimal!
  # total supply of liquidity tokens
  totalSupply: BigInt!
  # total liquidity of tokenA
  liquidityA: BigInt!
  # total liquidity of tokenB
  liquidityB: BigInt!
  # current priceA tracker
  priceARaw: BigInt!
  # current priceB tracker
  priceBRaw: BigInt!
  # current tickA
  tickA: BigInt!
  # current tickB
  tickB: BigInt!
  # all time tokenA swapped
  volumeTokenA: BigInt!
  # all time tokenB swapped
  volumeTokenB: BigInt!
  # all time USD swapped
  volumeUSD: BigDecimal!
  # all time USD swapped, unfiltered for unreliable USD pools
  untrackedVolumeUSD: BigDecimal!
  # all time number of transactions
  txCount: BigInt!
  # spread profit in USD
  spreadProfitUSD: BigDecimal!
  # hourly snapshots of pool data
  poolHourData: [PoolHourData!]! @derivedFrom(field: "pool")
  # daily snapshots of pool data
  poolDayData: [PoolDayData!]! @derivedFrom(field: "pool")
}

type MarketDayData @entity {
  # `${poolKey}-{periodStartUnix}`
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to market
  market: Market!
  # quote per base
  price: BigDecimal!
  # base per quote
  inversePrice: BigDecimal!
  # all time quote swapped
  volumeQuote: BigDecimal!
  # all time base swapped
  volumeBase: BigDecimal!
  # all time USD swapped
  volumeUSD: BigDecimal!
  # all time USD swapped, unfiltered for unreliable USD books
  untrackedVolumeUSD: BigDecimal!
  # all time number of transactions
  txCount: BigInt!
  # all time protocolFees quote
  protocolFeesQuote: BigDecimal!
  # all time protocolFees base
  protocolFeesBase: BigDecimal!
  # all time protocolFees derived USD
  protocolFeesUSD: BigDecimal!
  # total quote across all ticks
  totalValueLockedQuote: BigDecimal!
  # total base across all ticks
  totalValueLockedBase: BigDecimal!
  # tvl USD
  totalValueLockedUSD: BigDecimal!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: BigDecimal!
}

# Data accumulated and condensed into day stats for each pool
type PoolDayData @entity {
  # `${poolKey}-{periodStartUnix}`
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to pool
  pool: Pool!

  # oracle price
  oraclePrice: BigDecimal!
  # total supply of liquidity tokens
  totalSupply: BigInt!
  # total liquidity of tokenA
  liquidityA: BigInt!
  # total liquidity of tokenB
  liquidityB: BigInt!
  # current priceA tracker
  priceARaw: BigInt!
  # current priceB tracker
  priceBRaw: BigInt!
  # current tickA
  tickA: BigInt!
  # current tickB
  tickB: BigInt!
  # all time tokenA swapped
  volumeTokenA: BigInt!
  # all time tokenB swapped
  volumeTokenB: BigInt!
  # all time USD swapped
  volumeUSD: BigDecimal!
  # number of transactions during period
  txCount: BigInt!
  # spread profit in USD
  spreadProfitUSD: BigDecimal!
}

# hourly stats tracker for pool
type PoolHourData @entity {
  # ${poolKey}-{periodStartUnix}
  id: ID!
  # unix timestamp for start of hour
  date: Int!
  # pointer to pool
  pool: Pool!

  # oracle price
  oraclePrice: BigDecimal!
  # total supply of liquidity tokens
  totalSupply: BigInt!
  # total liquidity of tokenA
  liquidityA: BigInt!
  # total liquidity of tokenB
  liquidityB: BigInt!
  # current priceA tracker
  priceARaw: BigInt!
  # current priceB tracker
  priceBRaw: BigInt!
  # current tickA
  tickA: BigInt!
  # current tickB
  tickB: BigInt!
  # all time tokenA swapped
  volumeTokenA: BigInt!
  # all time tokenB swapped
  volumeTokenB: BigInt!
  # all time USD swapped
  volumeUSD: BigDecimal!
  # numebr of transactions during period
  txCount: BigInt!
  # spread profit in USD
  spreadProfitUSD: BigDecimal!
}

type TokenDayData @entity {
  # token address concatendated with date
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to token
  token: Token!

  # volume in token units
  volume: BigDecimal!
  # volume in derived USD
  volumeUSD: BigDecimal!
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: BigDecimal!
  # liquidity across all pools in token units
  totalValueLocked: BigDecimal!
  # liquidity across all pools in derived USD
  totalValueLockedUSD: BigDecimal!
  # price at end of period in USD
  priceUSD: BigDecimal!
  # protocolFees in USD
  protocolFeesUSD: BigDecimal!
}
